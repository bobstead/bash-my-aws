AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2
    Description: Amazon Linux 2 AMI
  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  Subnets:
    ConstraintDescription: must be a list of at least two existing subnets associated with at least two different availability zones. They should be residing in the selected Virtual Private Cloud.
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    Type: List<AWS::EC2::Subnet::Id>
  VpcId:
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    Type: AWS::EC2::VPC::Id
Resources:
  EC2Instance1:
    Properties:
      ImageId: !Ref AmiId
      InstanceType: t4g.nano
      KeyName: !Ref KeyName
      SecurityGroupIds:
      - Ref: InstanceSecurityGroup
      SubnetId:
        Fn::Select:
        - 0
        - Ref: Subnets
    Type: AWS::EC2::Instance
  EC2Instance2:
    Properties:
      InstanceType: t4g.nano
      ImageId: !Ref AmiId
      KeyName: !Ref KeyName
      SecurityGroupIds:
      - Ref: InstanceSecurityGroup
      SubnetId:
        Fn::Select:
        - 1
        - Ref: Subnets
    Type: AWS::EC2::Instance
  InstanceSecurityGroup:
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the inbound port
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      VpcId: !Ref VpcId
    Type: AWS::EC2::SecurityGroup

  # ALB
  ApplicationLoadBalancer:
    Properties:
      Subnets:
        Ref: Subnets
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  ALBListener:
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref ALBTargetGroup
        Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  ALBTargetGroup:
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: 'true'
      Targets:
      - Id: !Ref EC2Instance1
        Port: 80
      - Id: !Ref EC2Instance2
        Port: 80
      UnhealthyThresholdCount: 5
      VpcId: !Ref VpcId
    Type: AWS::ElasticLoadBalancingV2::TargetGroup

  # NLB
  NetworkLoadBalancer:
    Properties:
      Subnets: !Ref Subnets
      Type: network
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  NLBListener:
    Properties:
      DefaultActions:
      - TargetGroupArn: !Ref NLBTargetGroup
        Type: forward
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: '80'
      Protocol: TCP
    Type: AWS::ElasticLoadBalancingV2::Listener
  NLBTargetGroup:
    Properties:
      Port: 80
      Protocol: TCP
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: 'true'
      Targets:
      - Id: !Ref EC2Instance1
        Port: 80
      - Id: !Ref EC2Instance2
        Port: 80
      VpcId: !Ref VpcId
    Type: AWS::ElasticLoadBalancingV2::TargetGroup

